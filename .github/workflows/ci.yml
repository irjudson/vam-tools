name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Fast quality checks - fail fast if code quality issues
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Check formatting with black
      run: |
        source venv/bin/activate
        black --check vam_tools/ tests/

    - name: Check import sorting with isort
      run: |
        source venv/bin/activate
        isort --check-only vam_tools/ tests/

    - name: Lint with flake8
      run: |
        source venv/bin/activate
        flake8 vam_tools/ tests/

    - name: Type check with mypy
      run: |
        source venv/bin/activate
        mypy vam_tools/ || true  # Don't fail on mypy for now

  # Run tests on multiple platforms and Python versions
  test:
    name: Tests (Python ${{ matrix.python-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: quality  # Only run tests if quality checks pass

    strategy:
      fail-fast: false  # Continue testing other versions even if one fails
      matrix:
        os: [ubuntu-latest, macos-latest]  # Removed windows for now
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Skip some combinations to save CI time
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.10'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libimage-exiftool-perl

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install exiftool

    - name: Install Python dependencies
      run: |
        python -m venv venv
        if [ "$RUNNER_OS" == "Windows" ]; then
          source venv/Scripts/activate
        else
          source venv/bin/activate
        fi
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests with coverage
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          source venv/Scripts/activate
        else
          source venv/bin/activate
        fi
        pytest --cov=vam_tools --cov-report=xml --cov-report=term -v

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  # Summary job - reports overall status
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: always()

    steps:
    - name: Check all jobs
      run: |
        if [ "${{ needs.quality.result }}" != "success" ]; then
          echo "❌ Quality checks failed"
          exit 1
        fi
        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "❌ Tests failed"
          exit 1
        fi
        echo "✅ All CI checks passed!"
